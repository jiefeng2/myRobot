#include "ForceSensorModule.h"

/* CRC 高位字节值表 */
const quint8 auchCRCHi[] = {
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
	0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
	0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
	0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
	0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
	0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
	0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
	0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
	0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
	0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40
};

/* CRC低位字节值表*/
const quint8 auchCRCLo[] = {
	0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06,
	0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD,
	0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
	0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A,
	0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC, 0x14, 0xD4,
	0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
	0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3,
	0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4,
	0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
	0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29,
	0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED,
	0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
	0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60,
	0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67,
	0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
	0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68,
	0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E,
	0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
	0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71,
	0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92,
	0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
	0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B,
	0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B,
	0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
	0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
	0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

//轮询测量值
static char GetValueTable[8] = { 0x01, 0x03, 0x00, 0x50, 0x00, 0x08, 0x44, 0x1D };

//设置滤波器
static char SetFilterTable[8] = { 0x01, 0x03, 0x00, 0x22, 0x00, 0x02, 0xF4, 0x7A };

//设置零点值
static char SetZeroValueTable[13] = { 0x01, 0x10, 0x00, 0x54, 0x00, 0x02, 0x04, 0x7F, 0xFF, 0xFF, 0xFF, 0xDF, 0x34 };


ForceSensorModule::ForceSensorModule(QObject *parent)
	: QObject(parent)
{

	IsSetFilter = false;					
	IsClearForce = false;					
	IsStartGetForceValue = false;			
	IsReadForceVal = false;

	n_ForceSensorFilterType = 0;
	n_ForceSensorFilterStrength = 0;

	pForce_SerialPort = new QSerialPort();

	forceSensorReadTmr = new  QTimer();
	connect(this->forceSensorReadTmr, SIGNAL(timeout()), this, SLOT(OnforceSensorReadTmr()));
	forceSensorReadTmr->setInterval(50);
	forceSensorReadTmr->start();

}

ForceSensorModule::~ForceSensorModule()
{
}



quint16 ForceSensorModule::CRC16(char *puchMsg, int usDataLen)
{
	quint8 uchCRCHi = 0xFF;     /* 高CRC字节初始化 */
	quint8 uchCRCLo = 0xFF;     /* 低CRC 字节初始化 */
	quint8 uIndex;                   /* CRC循环中的索引 */

	while (usDataLen--)                 /* 传输消息缓冲区 */
	{
		uIndex = uchCRCHi ^ *puchMsg++; /* 计算CRC */
		uchCRCHi = uchCRCLo ^ auchCRCHi[uIndex];
		uchCRCLo = auchCRCLo[uIndex];
	}
	return (uchCRCHi << 8 | uchCRCLo);
}


void ForceSensorModule::OnforceSensorReadTmr()
{
	QByteArray serialrecvdata;              //串口接收缓冲区
	int k = 0;

	//1. 接收串口发送过来的数据
	serialrecvdata = pForce_SerialPort->readAll();
	if (serialrecvdata.size() != 0)
	{
		for (k = 0; k < serialrecvdata.size(); k++)
		{
			qDebug() << serialrecvdata[k];
		}
		if ((int)serialrecvdata[2] == 0x10)
		{
			Gross_Weight = (int)((quint8)serialrecvdata[3] << 24) + (int)((quint8)serialrecvdata[4] << 16) + (int)((quint8)serialrecvdata[5] << 8) + (quint8)serialrecvdata[6];					//毛重
			Net_weight = (int)((quint8)serialrecvdata[7] << 24) + (int)((quint8)serialrecvdata[8] << 16) + (int)((quint8)serialrecvdata[9] << 8) + (quint8)serialrecvdata[10];					//净重 
			Tare = (int)((quint8)serialrecvdata[11] << 24) + (int)((quint8)serialrecvdata[12] << 16) + (int)((quint8)serialrecvdata[13] << 8) + (quint8)serialrecvdata[14];						//皮重
			Max_Weight = (int)((quint8)serialrecvdata[15] << 24) + (int)((quint8)serialrecvdata[16] << 16) + (int)((quint8)serialrecvdata[17] << 8) + (quint8)serialrecvdata[18];				//最大称重量

			QString  Gross_WeightStr = QString("%1").arg(Gross_Weight);
			QString  TareStr = QString("%1").arg(Tare);
			QString  Net_weightStr = QString("%1").arg(Net_weight);

		}

		if ((int)serialrecvdata[2] == 0x16)
		{

		}
	}


	//2. 通过串口发送数据
	if (true == IsSetFilter)
	{
		IsSetFilter = false;
		SetFilter(n_ForceSensorFilterType, n_ForceSensorFilterStrength);
	}
	else if (true == IsClearForce)
	{
		IsClearForce = false;
		pForce_SerialPort->write(SetZeroValueTable, 13);
	}
//	else if (true == IsStartGetForceValue)
	else
	{
		IsStartGetForceValue = false;
		pForce_SerialPort->write(GetValueTable, 8);
	}


}

//打开力传感器端口
bool ForceSensorModule::OpenForceSensorPort(QString portname)
{
	bool ret = false;
	pForce_SerialPort->setPortName(portname);

	if (pForce_SerialPort->isOpen())
	{
		pForce_SerialPort->close();
	}

	ret = pForce_SerialPort->open(QIODevice::ReadWrite);
	if (ret == true)
	{
		pForce_SerialPort->setBaudRate(QSerialPort::Baud9600);
		pForce_SerialPort->setDataBits(QSerialPort::Data8);
		pForce_SerialPort->setFlowControl(QSerialPort::NoFlowControl);
		pForce_SerialPort->setParity(QSerialPort::NoParity);
		pForce_SerialPort->setStopBits(QSerialPort::TwoStop);
	}
	return ret;
}


//关闭传感器串口
bool ForceSensorModule::CloseForceSensorPort()
{
	bool ret = false;
	if (pForce_SerialPort->isOpen())
	{
		pForce_SerialPort->close();
		ret = true;
	}
	else
	{
		ret = true;
	}
	return ret;
}




#if 1
//设置滤波器
void ForceSensorModule::SetFilter(int filterType, int filterStrength)
{
	quint16 CrcCheck = 0;
	char SendTable[13] = { 0x01, 0x10, 0x00, 0x22, 0x00, 0x02, 0x04, 0x00, 0xFF, 0x00, 0xFF, 0xDF, 0x34 };
//	filterType = ui.comBoxFilterType->currentIndex();
//	filterStrength = ui.spboxFilterStrength->text().toInt();

	SendTable[8] = (char)filterType;
	SendTable[10] = (char)filterStrength;
	CrcCheck = CRC16(SendTable, 11);
	SendTable[11] = CrcCheck / 256;
	SendTable[12] = CrcCheck % 256;

	pForce_SerialPort->write(SendTable, 13);
}
#endif

void ForceSensorModule::SetSensorSetFilter()
{

}

void ForceSensorModule::SetSensorSetZero()
{

}

void ForceSensorModule::GetSensorValue()
{

}





















